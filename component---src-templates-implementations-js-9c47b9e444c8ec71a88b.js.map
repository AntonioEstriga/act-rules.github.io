{"version":3,"sources":["webpack:///./src/templates/implementations.js","webpack:///./src/utils/render-fragments.js"],"names":["markdownRemark","data","html","frontmatter","title","className","getImplementationsTabulation","implementers","dangerouslySetInnerHTML","__html","query","cls","ruleId","map","row","organisation","tool","filename","split","join","toLowerCase","reportUrl","key","href","getCompleteImplementations","metrics","filter","metric","implementation","complete","incorrect","length","getImplementationsLink","slug","replace","implementationMetrics","getImplementations","id","getImplementationsCount","getGlossaryUsed","allGlossary","usedKeys","getGlossaryItemsUsedInRule","includes","push","glossaries","edges","node","getGlossaryUsedLink","keys","Object","glossaryUsages","forEach","getRuleType","rule_type","getInputAspects","aspects","ruleFormatInputAspects","aspect","aHref","getInputRulesForRule","inputRules","allRules","stripBasePath","inputRuleId","atomicRule","find","rule","fields","name","getRuleUsageInRules","usages","rulesUsages","usage","to","getDateTimeFromUnixTimestamp","unixtimestamp","date","Date","year","getFullYear","getMonth","getDate"],"mappings":"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","file":"component---src-templates-implementations-js-9c47b9e444c8ec71a88b.js","sourcesContent":["import React from 'react'\nimport Layout from '../components/layout'\nimport { graphql } from 'gatsby'\nimport SEO from '../components/seo'\nimport implementers from './../../_data/implementers'\nimport { getImplementationsTabulation } from './../utils/render-fragments'\n\nexport default ({ data }) => {\n\tconst { markdownRemark } = data\n\tconst { html, frontmatter } = markdownRemark\n\n\treturn (\n\t\t<Layout>\n\t\t\t<SEO title={frontmatter.title} />\n\t\t\t<section className=\"page-container\">\n\t\t\t\t<h1>{frontmatter.title}</h1>\n\t\t\t\t<section>\n\t\t\t\t\t<h2>Implementation Overview</h2>\n\t\t\t\t\t{getImplementationsTabulation(implementers)}\n\t\t\t\t</section>\n\t\t\t\t<div dangerouslySetInnerHTML={{ __html: html }} />\n\t\t\t</section>\n\t\t</Layout>\n\t)\n}\n\nexport const query = graphql`\n\tquery($slug: String!) {\n\t\tmarkdownRemark(fields: { slug: { eq: $slug } }) {\n\t\t\thtml\n\t\t\tfrontmatter {\n\t\t\t\ttitle\n\t\t\t}\n\t\t}\n\t}\n`\n","import React from 'react'\nimport { Link } from 'gatsby'\nimport glossaryUsages from './../../_data/glossary-usages.json'\nimport implementationMetrics from './../../_data/implementation-metrics.json'\nimport rulesUsages from './../../_data/rules-usages.json'\n\nexport const getImplementationsTabulation = (implementers, cls = 'compact', ruleId) => {\n\treturn (\n\t\t<table className={cls}>\n\t\t\t<thead>\n\t\t\t\t<tr>\n\t\t\t\t\t<th>Tool Name</th>\n\t\t\t\t\t<th>Created By</th>\n\t\t\t\t\t<th>Report</th>\n\t\t\t\t</tr>\n\t\t\t</thead>\n\t\t\t<tbody>\n\t\t\t\t{implementers.map(row => {\n\t\t\t\t\tconst { organisation, tool } = row\n\t\t\t\t\tconst filename = tool\n\t\t\t\t\t\t.split(' ')\n\t\t\t\t\t\t.join('-')\n\t\t\t\t\t\t.toLowerCase()\n\t\t\t\t\tconst reportUrl = ruleId ? `/implementation/${filename}#${ruleId}` : `/implementation/${filename}`\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<tr key={tool}>\n\t\t\t\t\t\t\t<td>{tool}</td>\n\t\t\t\t\t\t\t<td>{organisation}</td>\n\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t<a href={reportUrl}>View Report</a>\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t)\n\t\t\t\t})}\n\t\t\t</tbody>\n\t\t</table>\n\t)\n}\n\nconst getCompleteImplementations = metrics => {\n\treturn metrics.filter(metric => {\n\t\tconst implementation = metric.implementation[0]\n\t\tconst { complete, incorrect } = implementation\n\t\treturn !!complete && !incorrect.length\n\t})\n}\n\nexport const getImplementationsLink = slug => {\n\tconst ruleId = slug.replace('rules/', '')\n\tconst metrics = implementationMetrics[ruleId]\n\tif (!metrics) {\n\t\treturn null\n\t}\n\treturn (\n\t\t<li>\n\t\t\t<a href=\"#implementation-metrics\">Implementations ({getCompleteImplementations(metrics).length})</a>\n\t\t</li>\n\t)\n}\n\nexport const getImplementations = slug => {\n\tconst ruleId = slug.replace('rules/', '')\n\tconst metrics = implementationMetrics[ruleId]\n\tif (!metrics) {\n\t\treturn null\n\t}\n\treturn (\n\t\t<>\n\t\t\t<a id=\"implementation-metrics\" href=\"#implementation-metrics\">\n\t\t\t\t<h2>Implementations</h2>\n\t\t\t</a>\n\t\t\t{getImplementationsTabulation(getCompleteImplementations(metrics), 'compact', ruleId)}\n\t\t</>\n\t)\n}\n\nexport const getImplementationsCount = slug => {\n\tconst ruleId = slug.replace('rules/', '')\n\tconst metrics = implementationMetrics[ruleId]\n\tif (!metrics) {\n\t\treturn null\n\t}\n\treturn (\n\t\t<div className=\"side-notes\">\n\t\t\t<div className=\"meta\">\n\t\t\t\t<span className=\"heading\">Implementations: {getCompleteImplementations(metrics).length}</span>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport const getGlossaryUsed = (slug, allGlossary) => {\n\tconst usedKeys = getGlossaryItemsUsedInRule(slug)\n\t// Always show the outcome definition:\n\tif (!usedKeys.includes('#outcome')) {\n\t\tusedKeys.push('#outcome')\n\t}\n\tconst glossaries = allGlossary.edges.filter(({ node }) => {\n\t\tconst {\n\t\t\tfrontmatter: { key },\n\t\t} = node\n\t\treturn usedKeys.includes(`#${key}`)\n\t})\n\tif (!glossaries.length) {\n\t\treturn null\n\t}\n\treturn (\n\t\t<>\n\t\t\t<a id=\"glossary-listing\" href=\"#glossary-listing\">\n\t\t\t\t<h2>Glossary</h2>\n\t\t\t</a>\n\t\t\t{glossaries.map(({ node }) => {\n\t\t\t\tconst { frontmatter, html } = node\n\t\t\t\tconst { key } = frontmatter\n\t\t\t\treturn (\n\t\t\t\t\t<article key={node.id}>\n\t\t\t\t\t\t<a id={key} href={`#${key}`}>\n\t\t\t\t\t\t\t<h3>{frontmatter.title}</h3>\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t<i>\n\t\t\t\t\t\t\tkey: <u>{key}</u>\n\t\t\t\t\t\t</i>\n\t\t\t\t\t\t<div dangerouslySetInnerHTML={{ __html: html }} />\n\t\t\t\t\t</article>\n\t\t\t\t)\n\t\t\t})}\n\t\t</>\n\t)\n}\n\nexport const getGlossaryUsedLink = (slug, allGlossary) => {\n\tconst usedKeys = getGlossaryItemsUsedInRule(slug)\n\tif (!usedKeys) {\n\t\treturn null\n\t}\n\tconst glossaries = allGlossary.edges.filter(({ node }) => {\n\t\tconst {\n\t\t\tfrontmatter: { key },\n\t\t} = node\n\t\treturn usedKeys.includes(`#${key}`)\n\t})\n\tif (!glossaries.length) {\n\t\treturn null\n\t}\n\treturn (\n\t\t<li>\n\t\t\t<a href=\"#glossary-listing\">Glossary</a>\n\t\t</li>\n\t)\n}\n\nexport const getGlossaryItemsUsedInRule = slug => {\n\tconst keys = []\n\tObject.keys(glossaryUsages).forEach(key => {\n\t\tglossaryUsages[key].forEach(({ slug: s }) => {\n\t\t\tif (s === slug && !keys.includes(key)) {\n\t\t\t\tkeys.push(key)\n\t\t\t}\n\t\t})\n\t})\n\treturn keys\n}\n\nexport function getRuleType(rule_type) {\n\tif (!rule_type) {\n\t\treturn null\n\t}\n\treturn (\n\t\t<li>\n\t\t\t<span className=\"heading\">Rule Type</span>\n\t\t\t<span>{rule_type}</span>\n\t\t</li>\n\t)\n}\n\nexport function getInputAspects(aspects, ruleFormatInputAspects) {\n\tif (!aspects) {\n\t\treturn null\n\t}\n\treturn (\n\t\t<>\n\t\t\t<span className=\"heading\">Input Aspects</span>\n\t\t\t<ul>\n\t\t\t\t{aspects.map(aspect => {\n\t\t\t\t\tconst aHref = ruleFormatInputAspects[aspect]\n\t\t\t\t\t\t? ruleFormatInputAspects[aspect]\n\t\t\t\t\t\t: ruleFormatInputAspects['default']\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<li key={aspect}>\n\t\t\t\t\t\t\t<a className=\"sc-item block\" href={aHref}>\n\t\t\t\t\t\t\t\t{aspect}\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t)\n\t\t\t\t})}\n\t\t\t</ul>\n\t\t</>\n\t)\n}\n\nexport function getInputRulesForRule(inputRules, allRules, stripBasePath = false) {\n\tif (!inputRules) {\n\t\treturn null\n\t}\n\treturn (\n\t\t<div className=\"side-notes\">\n\t\t\t<div className=\"meta\">\n\t\t\t\t<span className=\"heading\">Input Rules</span>\n\t\t\t\t<ul>\n\t\t\t\t\t{inputRules.map(inputRuleId => {\n\t\t\t\t\t\tconst atomicRule = allRules.find(rule => rule.node.frontmatter.id === inputRuleId)\n\t\t\t\t\t\tconst aHref = stripBasePath\n\t\t\t\t\t\t\t? atomicRule.node.fields.slug.replace('rules/', '')\n\t\t\t\t\t\t\t: atomicRule.node.fields.slug\n\t\t\t\t\t\tconst name = atomicRule.node.frontmatter.name\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<li key={inputRuleId}>\n\t\t\t\t\t\t\t\t<a className=\"sc-item block\" href={aHref}>\n\t\t\t\t\t\t\t\t\t{name}\n\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t)\n\t\t\t\t\t})}\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport function getRuleUsageInRules(ruleId) {\n\tconst usages = rulesUsages[ruleId]\n\tif (!usages) {\n\t\treturn null\n\t}\n\treturn (\n\t\t<div className=\"side-notes\">\n\t\t\t<div className=\"meta\">\n\t\t\t\t<span className=\"heading\">Used in rules</span>\n\t\t\t\t<ul>\n\t\t\t\t\t{usages.map(usage => (\n\t\t\t\t\t\t<li key={usage.slug}>\n\t\t\t\t\t\t\t<Link key={usage.slug} to={usage.slug}>\n\t\t\t\t\t\t\t\t{usage.name}\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t))}\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\n/**\n * Get formatted date from unix timestamp\n * @param {String} unixtimestamp UNIX timestamp\n */\nexport function getDateTimeFromUnixTimestamp(unixtimestamp) {\n\tconst months_arr = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n\tconst date = new Date(unixtimestamp * 1000)\n\tconst year = date.getFullYear()\n\tconst month = months_arr[date.getMonth()]\n\tconst day = date.getDate()\n\n\treturn `${month} ${day}, ${year}`\n}\n"],"sourceRoot":""}