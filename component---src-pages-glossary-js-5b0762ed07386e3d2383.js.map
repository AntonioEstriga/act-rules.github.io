{"version":3,"sources":["webpack:///./src/pages/glossary.js"],"names":["edges","data","glossaryData","title","className","map","node","frontmatter","html","key","usedInRules","glossaryUsages","id","to","dangerouslySetInnerHTML","__html","getGlossaryUsageInRules","query"],"mappings":"0FAAA,6GAOe,sBAAe,IAErBA,EAFoB,EAAXC,KACTC,aACAF,MAER,OACC,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAKG,MAAM,aACX,6BAASC,UAAU,gCAClB,wCACA,6BAASA,UAAU,WACjBJ,EAAMK,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACLC,EAAsBD,EAAtBC,YAAaC,EAASF,EAATE,KACbC,EAAQF,EAARE,IACFC,EAAcC,EAAe,IAAIF,GACvC,OACC,6BAASA,IAAKA,GACb,iCACC,kBAAC,OAAD,CAAMG,GAAIH,EAAKI,GAAE,IAAMJ,GACtB,4BAAKF,EAAYJ,QAElB,mCAASM,GACT,yBAAKK,wBAAyB,CAAEC,OAAQP,MAExCQ,YAAwBN,WAU1B,IAAMO,EAAK","file":"component---src-pages-glossary-js-5b0762ed07386e3d2383.js","sourcesContent":["import React from 'react'\nimport { graphql, Link } from 'gatsby'\nimport Layout from '../components/layout/'\nimport SEO from '../components/seo'\nimport { getGlossaryUsageInRules } from './../utils/render-fragments'\nimport glossaryUsages from './../../_data/glossary-usages.json'\n\nexport default ({ data }) => {\n\tconst { glossaryData } = data\n\tconst { edges } = glossaryData\n\n\treturn (\n\t\t<Layout>\n\t\t\t<SEO title=\"Glossary\" />\n\t\t\t<section className=\"page-container page-glossary\">\n\t\t\t\t<h1>Glossary</h1>\n\t\t\t\t<section className=\"listing\">\n\t\t\t\t\t{edges.map(({ node }) => {\n\t\t\t\t\t\tconst { frontmatter, html } = node\n\t\t\t\t\t\tconst { key } = frontmatter\n\t\t\t\t\t\tconst usedInRules = glossaryUsages[`#${key}`]\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<article key={key}>\n\t\t\t\t\t\t\t\t<section>\n\t\t\t\t\t\t\t\t\t<Link id={key} to={`#${key}`}>\n\t\t\t\t\t\t\t\t\t\t<h2>{frontmatter.title}</h2>\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t\t<i>key: {key}</i>\n\t\t\t\t\t\t\t\t\t<div dangerouslySetInnerHTML={{ __html: html }} />\n\t\t\t\t\t\t\t\t</section>\n\t\t\t\t\t\t\t\t{getGlossaryUsageInRules(usedInRules)}\n\t\t\t\t\t\t\t</article>\n\t\t\t\t\t\t)\n\t\t\t\t\t})}\n\t\t\t\t</section>\n\t\t\t</section>\n\t\t</Layout>\n\t)\n}\n\nexport const query = graphql`\n\tquery {\n\t\tglossaryData: allMarkdownRemark(\n\t\t\tsort: { fields: [frontmatter___title], order: ASC }\n\t\t\tfilter: { fields: { markdownType: { eq: \"glossary\" } } }\n\t\t) {\n\t\t\tedges {\n\t\t\t\tnode {\n\t\t\t\t\tid\n\t\t\t\t\thtml\n\t\t\t\t\tfrontmatter {\n\t\t\t\t\t\ttitle\n\t\t\t\t\t\tkey\n\t\t\t\t\t}\n\t\t\t\t\tfields {\n\t\t\t\t\t\tmarkdownType\n\t\t\t\t\t}\n\t\t\t\t\texcerpt\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n`\n"],"sourceRoot":""}