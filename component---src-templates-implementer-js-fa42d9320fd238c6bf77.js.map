{"version":3,"sources":["webpack:///./src/templates/implementer.js","webpack:///./node_modules/core-js/modules/_object-to-array.js","webpack:///./node_modules/core-js/modules/es7.object.values.js","webpack:///./src/components/table-testcase-findings.js","webpack:///./src/components/list-of-implementations.js"],"names":["Implementer","location","data","sitePage","context","title","implementerData","implementerReport","JSON","parse","areAllMappingsIncomplete","actMapping","every","complete","completeMaps","filterByConsistency","className","cls","body","mapping","showIncomplete","query","items","values","filter","consistency","includes","DESCRIPTORS","getKeys","toIObject","isEnum","f","module","exports","isEntries","it","key","O","keys","length","i","result","call","push","$export","$values","S","TableTestcaseFindings","ruleId","implementations","defaultFilter","map","index","implementationId","Object","findings","url","testcase","expected","actual","actuals","relativeUrl","getHyphenatedString","groupFindingsOfImplementations","to","ListOfImplementations","ruleName","id","getPageContent"],"mappings":"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","file":"component---src-templates-implementer-js-fa42d9320fd238c6bf77.js","sourcesContent":["import React from 'react'\nimport { graphql } from 'gatsby'\n\nimport Layout from '../components/layout'\nimport SEO from '../components/seo'\nimport Note from '../components/note'\nimport ListOfImplementations from '../components/list-of-implementations'\n\nimport './implementer.scss'\n\nconst Implementer = ({ location, data }) => {\n\tconst { title, implementerData } = data.sitePage.context\n\tconst implementerReport = JSON.parse(implementerData)\n\n\tconst areAllMappingsIncomplete = implementerReport.actMapping.every(({ complete }) => complete === false)\n\tconst completeMaps = filterByConsistency(implementerReport.actMapping, ['consistent', 'partially-consistent'])\n\n\tif (areAllMappingsIncomplete) {\n\t\treturn (\n\t\t\t<Layout location={location}>\n\t\t\t\t<SEO title={title} />\n\t\t\t\t<section className=\"page-implementer\">\n\t\t\t\t\t<h1>{title}</h1>\n\t\t\t\t\t<Note\n\t\t\t\t\t\tcls={`invalid`}\n\t\t\t\t\t\ttitle={`Incomplete Implementation`}\n\t\t\t\t\t\tbody={`All implementations provided are incomplete. Kindly submit an amended implementation report.`}\n\t\t\t\t\t/>\n\t\t\t\t</section>\n\t\t\t</Layout>\n\t\t)\n\t}\n\n\treturn (\n\t\t<Layout location={location}>\n\t\t\t<SEO title={title} />\n\t\t\t<section className=\"page-implementer\">\n\t\t\t\t<h1>{title}</h1>\n\t\t\t\t<ListOfImplementations mapping={completeMaps} showIncomplete={false} />\n\t\t\t</section>\n\t\t</Layout>\n\t)\n}\n\nexport default Implementer\n\nexport const query = graphql`\n\tquery($path: String) {\n\t\tsitePage(path: { eq: $path }) {\n\t\t\tcontext {\n\t\t\t\tfilename\n\t\t\t\ttitle\n\t\t\t\timplementerData\n\t\t\t}\n\t\t}\n\t}\n`\n\n/**\n * Filter a given set of implementations based on consistency\n * @param {Array<Object>} items array of implementations\n * @param {Array<String>} values allowed values\n * @returns {Array<Object>}\n */\nexport function filterByConsistency(items, values) {\n\treturn items.filter(({ consistency }) => {\n\t\treturn values.includes(consistency)\n\t})\n}\n","var DESCRIPTORS = require('./_descriptors');\nvar getKeys = require('./_object-keys');\nvar toIObject = require('./_to-iobject');\nvar isEnum = require('./_object-pie').f;\nmodule.exports = function (isEntries) {\n  return function (it) {\n    var O = toIObject(it);\n    var keys = getKeys(O);\n    var length = keys.length;\n    var i = 0;\n    var result = [];\n    var key;\n    while (length > i) {\n      key = keys[i++];\n      if (!DESCRIPTORS || isEnum.call(O, key)) {\n        result.push(isEntries ? [key, O[key]] : O[key]);\n      }\n    }\n    return result;\n  };\n};\n","// https://github.com/tc39/proposal-object-values-entries\nvar $export = require('./_export');\nvar $values = require('./_object-to-array')(false);\n\n$export($export.S, 'Object', {\n  values: function values(it) {\n    return $values(it);\n  }\n});\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link } from 'gatsby'\n\nimport getHyphenatedString from '../../utils/get-hyphenated-string'\n\nconst TableTestcaseFindings = ({ ruleId, implementations = [], filter = defaultFilter }) => {\n\treturn (\n\t\t<table>\n\t\t\t<thead>\n\t\t\t\t<tr>\n\t\t\t\t\t<th>Testcase Url</th>\n\t\t\t\t\t<th>Expected</th>\n\t\t\t\t\t{implementations.map(({ implementationId }, index) => {\n\t\t\t\t\t\treturn <th key={`${implementationId}- ${index}`}>{implementationId}</th>\n\t\t\t\t\t})}\n\t\t\t\t</tr>\n\t\t\t</thead>\n\t\t\t<tbody>\n\t\t\t\t{Object.values(groupFindingsOfImplementations(ruleId, implementations, filter)).map(\n\t\t\t\t\t({ testcase, url, relativeUrl, expected, actuals }, index) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<tr key={`${url}-${index}`}>\n\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t<Link to={relativeUrl}>{testcase}</Link>\n\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t<td>{expected}</td>\n\t\t\t\t\t\t\t\t{implementations.map(({ implementationId }, index) => {\n\t\t\t\t\t\t\t\t\treturn <td key={`${implementationId}-${url}=${index}`}>{actuals[implementationId]}</td>\n\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t)}\n\t\t\t</tbody>\n\t\t</table>\n\t)\n}\n\nTableTestcaseFindings.propTypes = {\n\truleId: PropTypes.string.isRequired,\n\timplementations: PropTypes.array.isRequired,\n\tfilter: PropTypes.func,\n}\n\nexport default TableTestcaseFindings\n\n/**\n * Group implmentation set data per testcase\n * @param {Array<Object>} implementations implementation set\n * @param {Function} filter filter fn\n * @returns {Object}\n */\nfunction groupFindingsOfImplementations(ruleId, implementations, filter) {\n\tconst result = {}\n\n\tconst filteredImplementations = implementations.filter(filter)\n\n\tfor (const { implementationId, findings } of filteredImplementations) {\n\t\tfor (const { url, testcase, expected, actual } of findings) {\n\t\t\tif (!result[testcase]) {\n\t\t\t\tresult[testcase] = {\n\t\t\t\t\turl,\n\t\t\t\t\ttestcase,\n\t\t\t\t\trelativeUrl: `/rules/${ruleId}/#${getHyphenatedString(testcase)}`,\n\t\t\t\t\texpected,\n\t\t\t\t\tactuals: {\n\t\t\t\t\t\t[implementationId]: actual,\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tresult[testcase] = {\n\t\t\t\t\t...result[testcase],\n\t\t\t\t\tactuals: {\n\t\t\t\t\t\t...result[testcase].actuals,\n\t\t\t\t\t\t[implementationId]: actual,\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result\n}\n\n/**\n * Default filter which returns everything\n */\nfunction defaultFilter() {\n\treturn true\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link } from 'gatsby'\n\nimport Note from './note'\nimport TableTestcaseFindings from './table-testcase-findings'\n\nconst ListOfImplementations = ({ mapping = [], showIncomplete = false }) => {\n\treturn (\n\t\t<div>\n\t\t\t{mapping.map(({ ruleId, ruleName, implementations }) => {\n\t\t\t\treturn (\n\t\t\t\t\t<div key={ruleId}>\n\t\t\t\t\t\t<Link to={`/rules/${ruleId}`}>\n\t\t\t\t\t\t\t<h2 id={`id-${ruleId}`}>{ruleName}</h2>\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t{getPageContent(implementations, showIncomplete, ruleId)}\n\t\t\t\t\t</div>\n\t\t\t\t)\n\t\t\t})}\n\t\t</div>\n\t)\n}\n\nListOfImplementations.propTypes = {\n\tmapping: PropTypes.array.isRequired,\n\tshowIncomplete: PropTypes.bool,\n}\n\nexport default ListOfImplementations\n\n/**\n *\n * @param {Object[]} implementations implementations\n * @param {Boolean} showIncomplete should show incomplete implementations\n * @param {String} ruleId rule id\n */\nfunction getPageContent(implementations, showIncomplete, ruleId) {\n\tif (!implementations || !implementations.length) {\n\t\treturn (\n\t\t\t<Note\n\t\t\t\tcls={`invalid`}\n\t\t\t\ttitle={`No Implementations`}\n\t\t\t\tbody={`Feel free to submit an implementation for this rule.`}\n\t\t\t/>\n\t\t)\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t{showIncomplete ? (\n\t\t\t\t<>\n\t\t\t\t\t<Note\n\t\t\t\t\t\tcls={`invalid`}\n\t\t\t\t\t\ttitle={`Incomplete Implementation`}\n\t\t\t\t\t\tbody={`Listed below are the incomplete assertions. Kindly submit an amended implementation report.`}\n\t\t\t\t\t/>\n\t\t\t\t\t<TableTestcaseFindings\n\t\t\t\t\t\truleId={ruleId}\n\t\t\t\t\t\timplementations={implementations}\n\t\t\t\t\t\tfilter={({ consistency }) => consistency === `inconsistent`}\n\t\t\t\t\t/>\n\t\t\t\t</>\n\t\t\t) : (\n\t\t\t\t<TableTestcaseFindings\n\t\t\t\t\truleId={ruleId}\n\t\t\t\t\timplementations={implementations}\n\t\t\t\t\tfilter={({ consistency }) => consistency !== `inconsistent`}\n\t\t\t\t/>\n\t\t\t)}\n\t\t</>\n\t)\n}\n"],"sourceRoot":""}